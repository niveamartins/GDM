import React, { useState, useEffect, useContext } from 'react';

var UserMediaContext = React.createContext(null);

function UserMediaError(_a) {
    var error = _a.error;
    if (!error) {
        return null;
    }
    var errorMessage = error.name + ": " + error.message;
    if (error.name === "AbortError") {
        errorMessage = "Some problem occurred which prevented media device from being used. " + error.message;
    }
    else if (error.name === "NotAllowedError") {
        errorMessage = "The access to the media device has been denied. " + error.message;
    }
    else if (error.name === "NotFoundError") {
        errorMessage = "No media tracks of the type specified were found. " + error.message;
    }
    else if (error.name === "NotReadableError") {
        errorMessage = "Access to the media device was prevented by a hardware error occurred at the operating system. " + error.message;
    }
    else if (error.name === "SecurityError") {
        errorMessage = "Media support is disabled. " + error.message;
    }
    return React.createElement("p", null, errorMessage);
}

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
}

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function useUserMedia(constraints) {
    var _this = this;
    if (constraints === void 0) { constraints = { audio: true, video: true }; }
    var _a = useState(null), stream = _a[0], setStream = _a[1];
    var _b = useState(null), error = _b[0], setError = _b[1];
    useEffect(function () {
        if (stream)
            return;
        var didCancel = false;
        var getUserMedia = function () { return __awaiter(_this, void 0, void 0, function () {
            var stream_1, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, navigator.mediaDevices.getUserMedia(constraints)];
                    case 1:
                        stream_1 = _a.sent();
                        if (!didCancel) {
                            setStream(stream_1);
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        err_1 = _a.sent();
                        if (!didCancel) {
                            setError(err_1);
                        }
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); };
        var cancel = function () {
            didCancel = true;
            if (!stream)
                return;
            if (stream.getVideoTracks) {
                stream.getVideoTracks().map(function (track) { return track.stop(); });
            }
            if (stream.getAudioTracks) {
                stream.getAudioTracks().map(function (track) { return track.stop(); });
            }
            if (stream.stop) {
                stream.stop();
            }
        };
        getUserMedia();
        return cancel;
    }, [constraints, stream, error]);
    return {
        stream: stream,
        error: error,
    };
}

function UserMediaProvider(_a) {
    var children = _a.children, constraints = _a.constraints;
    var mediaStream = useUserMedia(constraints);
    return (React.createElement(UserMediaContext.Provider, { value: mediaStream }, React.Children.only(children)));
}

var useUserMediaFromContext = function () { return useContext(UserMediaContext); };

function withUserMedia(WrappedComponent) {
    function Hoc(props) {
        var userMedia = useUserMediaFromContext();
        var forwardedRef = props.forwardedRef, rest = __rest(props, ["forwardedRef"]);
        return React.createElement(WrappedComponent, __assign({}, rest, { ref: forwardedRef, userMedia: userMedia }));
    }
    Hoc.displayName = "withUserMedia(" + (WrappedComponent.displayName || WrappedComponent.name || 'Component') + ")";
    return React.forwardRef(function (props, ref) {
        return React.createElement(Hoc, __assign({}, props, { forwardedRef: ref }));
    });
}

export { UserMediaContext, UserMediaError, UserMediaProvider, useUserMedia, useUserMediaFromContext, withUserMedia };
//# sourceMappingURL=index.es.js.map
